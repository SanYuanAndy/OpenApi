// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.0.0"
    }
}

/******inject***********/
buildscript {
    repositories {
        maven {
            String homeDir = System.getenv("HOME") + "/plugin/inject"
            if (new File(homeDir).exists()) {
                name "localInject"
            }
            url "file:$homeDir"//双引号才行
        }
    }

    dependencies {
        if (rootProject.buildscript.getRepositories().findByName("localInject") != null) {
            classpath 'com.open.utils:class-injector:1.0'
        }
    }
}

if (rootProject.buildscript.getRepositories().findByName("localInject") != null) {
    project("app") {
        apply plugin: 'ClassInject'
    }
}
/******inject***********/

allprojects {
    repositories {
        google()
        jcenter()
    }

    List<String> ignores = new ArrayList<>()
    ignores.add("app")
    ignores.add(getRootProject().getName())

    String sdk_out_root = getRootDir().getPath() + "/sdk_out/"
    if (!ignores.contains(project.getName())) {
       task makeAar {
           doLast {
               String aar_out = sdk_out_root + "/aar/"
               copy {
                   from("build/outputs/aar")
                   include("*release.aar")
                   into(aar_out)
               }
           }
       }
       makeAar.dependsOn('assembleRelease')

       task makeJar {
           doLast {
               String jar_out = sdk_out_root + "/jar/"
               String jar_path = projectDir.absolutePath + "/build/intermediates/aar_main_jar/release/"
               copy {
                   from(jar_path)
                   include("classes.jar")
                   into(jar_out)
                   rename {
                       "classess.jar"
                       "${project.name}.jar"
                   }
               }
           }
       }
       makeJar.dependsOn('assembleRelease')

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

gradle.projectsEvaluated {

    tasks.withType(JavaCompile) {
        println task
        options.compilerArgs << '-Xbootclasspath/p:app/libs/framework.jar'
    }
}

apply from:'utils.gradle'